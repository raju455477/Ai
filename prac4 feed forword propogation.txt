#prac4 feed forword propogation
#feed forword propogation

import numpy as np

class NeuralNetwork:
    def _init_(self):
        np.random.seed()
        self.synaptic_weights = 2 * np.random.random((3, 1)) - 1

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def train(self, training_inputs, training_outputs, training_iterations):
        for iteration in range(training_iterations):
            output = self.think(training_inputs)
            error = training_outputs - output
            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))
            self.synaptic_weights += adjustments

    def think(self, inputs):
        inputs = inputs.astype(float)
        return self.sigmoid(np.dot(inputs, self.synaptic_weights))

if _name_ == "_main_":
    neural_network = NeuralNetwork()
    print("Beginning randomly generated weights:")
    print(neural_network.synaptic_weights)
    training_inputs = np.array([[0, 0, 1],[1, 1, 1], [1, 0, 1],[0, 1, 1]])
    training_outputs = np.array([[0, 1, 1, 0]]).T
    neural_network.train(training_inputs, training_outputs, 15000)
    print("Ending weights after training:")
    print(neural_network.synaptic_weights)
    user_input_one = float(input("User input One: "))
    user_input_two = float(input("User input Two: "))
    user_input_three = float(input("User input Three: "))
    print("Considering new situation:", user_input_one, user_input_two, user_input_three)
    user_input = np.array([user_input_one, user_input_two, user_input_three])
    print("New output data:")
    print(neural_network.think(user_input))